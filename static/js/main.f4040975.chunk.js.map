{"version":3,"sources":["components/TypeSelect/TypeSelect.js","helpers.js","components/TimeDisplay/TimeDisplay.js","components/Controls/Controls.js","components/Shortcuts/Shortcuts.js","components/ToggleSound/ToggleSound.js","components/ToggleTheme/ToggleTheme.js","components/Tasks/TaskToggle/index.js","components/Tasks/TaskList/context.js","components/Tasks/Task/index.js","components/Tasks/TaskList/index.js","containers/Pomodoro.js","index.js"],"names":["memo","_ref","types","changeType","selected","react_default","a","createElement","className","map","type","index","key","name","onClick","pad2","num","concat","formatTime","time","minutes","Math","floor","seconds","TimeDisplay","status","progress","document","title","circumference","normalizedRadius","PI","strokeDashoffset","width","viewBox","radius","stroke","fill","strokeWidth","r","cx","cy","strokeDasharray","style","start","reset","pause","sound","toggleSound","theme","setTheme","class","task","toggleTask","createContext","Task","ref","useRef","_useContext","useContext","TaskContext","move","handleStatus","_useDrag","useDrag","item","id","collect","monitor","isDragging","_useDrag2","Object","slicedToArray","dragRef","_useDrop","useDrop","accept","hover","dragged","target","targetSize","current","getBoundingClientRect","targetCenter","bottom","top","draggedTop","getClientOffset","y","order","dropRef","closed","_useState","useState","_useState2","input","setInput","taskStatus","value","_useState3","JSON","parse","window","localStorage","getItem","_useState4","tasks","setTasks","_useState5","_useState6","selectedStatus","setSelectedStatus","useEffect","setItem","stringify","context","Provider","from","to","produce","draft","taskMoved","splice","console","log","foundIndex","findIndex","components_TypeSelect_TypeSelect","length","filter","onChange","e","placeholder","push","Pomodoro","_Component","inherits","_super","createSuper","props","_this","classCallCheck","this","call","handleKeyUp","event","tagName","pauseTimer","resetTimer","setState","selectedType","running","tick","state","stopInterval","play","navigator","serviceWorker","register","then","sw","showNotification","clearInterval","interval","startTimer","setInterval","currentTime","getStatus","_this$state","getProgress","total","handleToggleSound","handleToggleTask","createClass","addEventListener","Notification","requestPermission","Audio","preload","removeEventListener","_this$state2","components_TimeDisplay_TimeDisplay","components_Controls_Controls","Tasks_TaskToggle","components_Shortcuts_Shortcuts","components_ToggleTheme_ToggleTheme","toggleTheme","components_ToggleSound_ToggleSound","Tasks_TaskList","Component","defaultProps","ReactDOM","render","DndProvider","backend","HTML5Backend","src_containers_Pomodoro","getElementById"],"mappings":"2aAiBeA,wBAdI,SAAHC,GAAA,IAAMC,EAAKD,EAALC,MAAOC,EAAUF,EAAVE,WAAYC,EAAQH,EAARG,SAAQ,OAC7CC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACVN,EAAMO,IAAI,SAACC,EAAMC,GAAK,OACnBN,EAAAC,EAAAC,cAAA,UACIK,IAAKF,EAAKG,KACVC,QAAS,kBAAMX,EAAWO,IAC1BF,UAAWE,EAAKG,OAAST,EAASS,KAAO,SAAW,IAEnDH,EAAKG,YCXtB,SAASE,EAAKC,GACV,OAAOA,EAAM,EAAIA,EAAG,IAAAC,OAAOD,GAGxB,SAASE,EAAWC,GACvB,IAAMC,EAAUL,EAAKM,KAAKC,MAAMH,EAAO,KACjCI,EAAUR,EAAKM,KAAKC,MAAMH,EAAO,KAEvC,SAAAF,OAAUG,EAAO,KAAAH,OAAIM,aCmCVC,EAvCK,SAAHvB,GAAmC,IAA7BkB,EAAIlB,EAAJkB,KAAMM,EAAMxB,EAANwB,OAAQC,EAAQzB,EAARyB,SACjCC,SAASC,MAAK,IAAAX,OAAOC,EAAWC,GAAK,cAErC,IAGMU,EAAgBC,IAAuBT,KAAKU,GAC5CC,EAAmBH,EAAiBH,EAAW,IAAOG,EAE5D,OACIxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAK0B,MAAM,OAAOC,QAAO,OAAAjB,OAASkB,IAAU,KAAAlB,OAAIkB,MAC5C9B,EAAAC,EAAAC,cAAA,UACI6B,OAAO,WACPC,KAAK,OACLC,YAXD,EAYCC,EAXSJ,IAYTK,GAdD,IAeCC,GAfD,MAiBHpC,EAAAC,EAAAC,cAAA,UACI6B,OAAO,UACPC,KAAK,cACLC,YAnBD,EAoBCI,gBAAiBb,EAAgB,IAAMA,EACvCc,MAAO,CAAEX,oBACTO,EArBSJ,IAsBTK,GAxBD,IAyBCC,GAzBD,OA4BPpC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKW,EAAWC,IAChBd,EAAAC,EAAAC,cAAA,SAAIkB,MCJLzB,wBA9BE,SAAHC,GAAA,IAAM2C,EAAK3C,EAAL2C,MAAOC,EAAK5C,EAAL4C,MAAOC,EAAK7C,EAAL6C,MAAOrB,EAAMxB,EAANwB,OAAM,OAC3CpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACTiB,GACEpB,EAAAC,EAAAC,cAAA,UAAQO,QAAS8B,EAAOpC,UAAU,SAAO,eAKjC,aAAXiB,GACGpB,EAAAC,EAAAC,cAAA,UAAQO,QAAS8B,EAAOpC,UAAU,SAAO,kBAKhC,WAAXiB,GAAkC,YAAXA,IACrBpB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQO,QAAS+B,EAAOrC,UAAU,SAAO,SAGzCH,EAAAC,EAAAC,cAAA,UACIO,QAASgC,EACTtC,UAAsB,WAAXiB,EAAsB,SAAW,SAEhC,WAAXA,EAAsB,SAAW,cCkBvCzB,wBAzCG,WAAH,OACXK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,sBAGRF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oBAGRF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,qBAGRF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,qBAGRF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,0BCxBLP,wBAVK,SAAHC,GAAA,IAAM8C,EAAK9C,EAAL8C,MAAOC,EAAW/C,EAAX+C,YAAW,OACrC3C,EAAAC,EAAAC,cAAA,UACIC,UAAS,eAAAS,OAAiB8B,GAAS,UACnCjC,QAASkC,EACTpB,MAAOmB,EAAQ,gBAAkB,gBAEjC1C,EAAAC,EAAAC,cAAA,KAAGC,UAAS,gBAAAS,OAAkB8B,EAAQ,KAAO,cCUtC/C,wBAhBK,SAAHC,GAA4B,IAAtBgD,EAAKhD,EAALgD,MAAOC,EAAQjD,EAARiD,SAK1B,OACI7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAEXH,EAAAC,EAAAC,cAAA,UAAQO,QAPK,WACjBoC,EAAmB,UAAVD,EAAoB,OAAS,WAOnB,UAAVA,EAAoB5C,EAAAC,EAAAC,cAAA,KAAG4C,MAAM,eAAoB9C,EAAAC,EAAAC,cAAA,KAAG4C,MAAM,eAE/D9C,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qBCDbR,wBAVI,SAAHC,GAAA,IAAMmD,EAAInD,EAAJmD,KAAMC,EAAUpD,EAAVoD,WAAU,OAClChD,EAAAC,EAAAC,cAAA,UACIC,UAAS,cAAAS,OAAgBmC,GAAQ,UACjCtC,QAASuC,EACTzB,MAAOwB,EAAO,eAAiB,eAE/B/C,EAAAC,EAAAC,cAAA,KAAGC,UAAW,mCCPP8C,0BAAc,0BCId,SAASC,EAAItD,GAAkB,IAAfmD,EAAInD,EAAJmD,KAAMzC,EAAKV,EAALU,MAC3B6C,EAAMC,mBACZC,EAA+BC,qBAAWC,GAAlCC,EAAIH,EAAJG,KAAMC,EAAYJ,EAAZI,aACdC,EAAkCC,YAAQ,CACtCC,KAAM,CAAEvD,KAAM,OAAQwD,GAAId,EAAKc,GAAIvD,SACnCwD,QAAS,SAAAC,GAAO,MAAK,CACjBC,WAAYD,EAAQC,iBAE1BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAR,EAAA,GALOM,EAAUC,EAAA,GAAVD,WAAcI,EAAOH,EAAA,GAO9BI,EAAoBC,YAAQ,CACxBC,OAAQ,OACRC,MAAK,SAACZ,EAAMG,GACR,GAAIH,EAAKC,KAAOd,EAAKc,GAArB,CACA,IAAMY,EAAUb,EACVc,EAAS3B,EACT4B,EAAaxB,EAAIyB,QAAQC,wBACzBC,GAAgBH,EAAWI,OAASJ,EAAWK,KAAO,EAEtDC,EADgBlB,EAAQmB,kBACGC,EAAIR,EAAWK,IAE5CP,EAAQW,MAAQV,EAAOU,OAASH,EAAaH,GAC7CL,EAAQW,MAAQV,EAAOU,OAASH,EAAaH,IAEjDtB,EAAKI,EAAKtD,MAAOA,GACjBsD,EAAKtD,MAAQA,OAMrB,OAFA8D,GAAQiB,EAFNnB,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAjBc,IAmBAlB,IAGZnD,EAAAC,EAAAC,cAAA,OAAKiD,IAAKA,EAAKhD,UAAW6D,EAAa,gBAAkB,QACrDhE,EAAAC,EAAAC,cAAA,WAAM6C,EAAKxB,OACXvB,EAAAC,EAAAC,cAAA,QAAMO,QAAS,kBAAMgD,EAAaV,KAC7BA,EAAKuC,OAAS,OAAS,oBCiDzB3F,iBAlFE,WACb,IAAA4F,EAA0BC,mBAAS,IAAGC,EAAAvB,OAAAC,EAAA,EAAAD,CAAAqB,EAAA,GAA/BG,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAChBG,EAAa,CACf,CAAEpF,KAAM,OAAQqF,OAAO,GACvB,CAAErF,KAAM,YAAaqF,OAAO,GAC5B,CAAErF,KAAM,MAAOqF,OAAQ,IAG3BC,EAA0BN,mBACtBO,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,mBAAqB,IAC/DC,EAAAlC,OAAAC,EAAA,EAAAD,CAAA4B,EAAA,GAFMO,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAGtBG,EAA4Cf,mBAASI,EAAW,IAAGY,EAAAtC,OAAAC,EAAA,EAAAD,CAAAqC,EAAA,GAA5DE,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GAmCxC,OAjCAG,oBAAU,WACNV,OAAOC,aAAaU,QAAQ,gBAAiBb,KAAKc,UAAUR,KAC7D,CAACA,IAgCArG,EAAAC,EAAAC,cAAC4G,EAAYC,SAAQ,CAAClB,MAAO,CAAEQ,QAAO7C,KA9B1C,SAAcwD,EAAMC,GAChBX,EACIY,YAAQb,EAAO,SAAAc,GACX,IAAMC,EAAYD,EAAMH,GACxBG,EAAME,OAAOL,EAAM,GACnBG,EAAME,OAAOJ,EAAI,EAAGG,OAyBgB3D,aApBhD,SAAsBV,GAClBuE,QAAQC,IAAI,QAASxE,GACrBuD,EACIY,YAAQb,EAAO,SAAAc,GACX,IAAMK,EAAaL,EAAMM,UAAU,SAAA7D,GAAI,OAAIA,EAAKC,KAAOd,EAAKc,KAC5DsD,EAAMK,GAAYlC,QAAU6B,EAAMK,GAAYlC,aAgBlDtF,EAAAC,EAAAC,cAACwH,EAAU,CACP7H,MAAO+F,EACP7F,SAAU0G,EACV3G,WAAY4G,IAEhB1G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVkG,EAAMsB,OAAS,EACZtB,EACKuB,OACG,SAAA7E,GAAI,OACAA,EAAKuC,SAAWmB,EAAeZ,QACL,IAA1BY,EAAeZ,QAEtBzF,IAAI,SAAC2C,EAAMzC,GAAK,OACbN,EAAAC,EAAAC,cAACgD,EAAI,CAAC3C,IAAKwC,EAAKc,GAAIvD,MAAOA,EAAOyC,KAAMA,MAGhD/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAM,cAIjCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,SACI2F,MAAOH,EACPmC,SAAU,SAAAC,GAAC,OAAInC,EAASmC,EAAEpD,OAAOmB,QACjCkC,YAAY,aAEhB/H,EAAAC,EAAAC,cAAA,QAAMO,QAvClB,WACI6F,EACIY,YAAQb,EAAO,SAAAc,GACXA,EAAMa,KAAK,CAAEnE,GAAIsD,EAAMQ,OAAS,EAAGpG,MAAOmE,EAAOJ,QAAQ,OAGjEK,EAAS,MAiCwB,WCzEnCsC,SAAQ,SAAAC,GAAAhE,OAAAiE,EAAA,EAAAjE,CAAA+D,EAAAC,GAAA,IAAAE,EAAAlE,OAAAmE,EAAA,EAAAnE,CAAA+D,GACV,SAAAA,EAAYK,GAAO,IAAAC,EAcb,OAdarE,OAAAsE,EAAA,EAAAtE,CAAAuE,KAAAR,IACfM,EAAAH,EAAAM,KAAAD,KAAMH,IAmCVK,YAAc,SAAAC,GACmB,UAAzBA,EAAMlE,OAAOmE,UACC,MAAdD,EAAMrI,IACNgI,EAAKO,aACgB,WAAdF,EAAMrI,IACbgI,EAAKQ,aACEH,EAAMrI,KAAO,GAAKqI,EAAMrI,KAAOgI,EAAKD,MAAMzI,MAAM8H,QACvDY,EAAKzI,WAAWyI,EAAKD,MAAMzI,MAAM+I,EAAMrI,IAAM,MAEpDgI,EAEDzI,WAAa,SAAAO,GACTkI,EAAKQ,aACLR,EAAKS,SAAS,CAAEC,aAAc5I,EAAMS,KAAMT,EAAKS,KAAMoI,SAAS,KACjEX,EAEDY,KAAO,WACH,GAAIZ,EAAKa,MAAMtI,MAAQ,EAAG,CACtByH,EAAKc,eACLd,EAAKS,SAAS,CAAEE,SAAS,IACrBX,EAAKa,MAAM1G,OAAO6F,EAAK7F,MAAM4G,OACjC,IACIC,UAAUC,cAAcC,SAAS,qBAAqBC,KAAK,SAAAC,GACvDA,EAAGC,iBAAgB,GAAAhJ,OAAI2H,EAAKa,MAAMH,aAAazI,KAAI,iBAEzD,MAAOsH,GACLR,QAAQC,IAAI,qBAAsBO,IAG1CS,EAAKS,SAAS,SAAAI,GAAK,MAAK,CAAEtI,KAAMsI,EAAMtI,KAAO,MAChDyH,EAEDc,aAAe,WACXQ,cAActB,EAAKa,MAAMU,UACzBvB,EAAKS,SAAS,CAAEc,SAAU,QAC7BvB,EAEDwB,WAAa,WACTxB,EAAKS,SAAS,SAAAI,GAAK,MAAK,CACpBF,SAAS,EACTY,SAAUE,YAAYzB,EAAKY,KAAM,KACjCrI,KAAMsI,EAAMtI,KAAO,EAAIsI,EAAMtI,KAAOsI,EAAMH,aAAanI,QAE3DyH,EAAK7F,MAAMD,QACX8F,EAAK7F,MAAMuH,YAAc,GAC5B1B,EAEDQ,WAAa,WACTR,EAAKc,eACLd,EAAKS,SAAS,SAAAI,GAAK,MAAK,CACpBtI,KAAMsI,EAAMH,aAAanI,KACzBoI,SAAS,MAEhBX,EAEDO,WAAa,WACTP,EAAKa,MAAMU,SAAWvB,EAAKc,eAAiBd,EAAKwB,cACpDxB,EAED2B,UAAY,WACR,IAAAC,EAAoC5B,EAAKa,MAAjCtI,EAAIqJ,EAAJrJ,KAAMoI,EAAOiB,EAAPjB,QAASY,EAAQK,EAARL,SACvB,OAAa,IAAThJ,EAAmB,WACnBoI,IAAYY,EAAiB,SAC7BZ,EAAgB,eAApB,GACHX,EAED6B,YAAc,WACV,IAAMxF,EAAU2D,EAAKa,MAAMtI,KACrBuJ,EAAQ9B,EAAKa,MAAMH,aAAanI,KACtC,OAASuJ,EAAQzF,GAAWyF,EAAS,KACxC9B,EAED+B,kBAAoB,WAChB/B,EAAKS,SACD,SAAAI,GAAK,MAAK,CACN1G,OAAQ0G,EAAM1G,QAElB,WACIuD,OAAOC,aAAaU,QAAQ,gBAAiB2B,EAAKa,MAAM1G,UAGnE6F,EAEDgC,iBAAmB,WACfhC,EAAKS,SACD,SAAAI,GAAK,MAAK,CACNxD,YAAawD,EAAMxD,aAEvB,WACIK,OAAOC,aAAaU,QAChB,qBACA2B,EAAKa,MAAMxD,eAI1B2C,EAED1F,SAAW,WACP0F,EAAKS,SACD,SAAAI,GAAK,MAAK,CACNxG,MAAO2F,EAAKa,MAAMxG,QAEtB,WACIqD,OAAOC,aAAaU,QAChB,gBACA2B,EAAKa,MAAMxG,UA3IvB2F,EAAKa,MAAQ,CACTH,aAAcX,EAAMzI,MAAM,GAC1BiB,KAAMwH,EAAMzI,MAAM,GAAGiB,KACrBgJ,SAAU,KACVZ,SAAS,EACTxG,MACIqD,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,oBAAqB,EAChEvD,MACImD,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,kBAC3CP,WACIG,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,wBACvC,MACNoC,EA0KL,OAzKArE,OAAAsG,EAAA,EAAAtG,CAAA+D,EAAA,EAAA1H,IAAA,oBAAAsF,MAUD,WACIvE,SAASmJ,iBAAiB,QAAShC,KAAKE,aACxC+B,aAAaC,oBACblC,KAAK/F,MAAQ,IAAIkI,MAAM,aACvBnC,KAAK/F,MAAMmI,QAAU,SACxB,CAAAtK,IAAA,uBAAAsF,MAED,WACIvE,SAASwJ,oBAAoB,QAASrC,KAAKE,eAC9C,CAAApI,IAAA,SAAAsF,MAiHD,WACI,IAAAkF,EAAyDtC,KAAKW,MAAtDtI,EAAIiK,EAAJjK,KAAMmI,EAAY8B,EAAZ9B,aAAcvG,EAAKqI,EAALrI,MAAOE,EAAKmI,EAALnI,MAAOgD,EAAUmF,EAAVnF,WAClC/F,EAAU4I,KAAKH,MAAfzI,MAER,OADAyH,QAAQC,IAAIkB,KAAKW,MAAMxG,OAEnB5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACwH,EAAU,CACP7H,MAAOA,EACPE,SAAUkJ,EACVnJ,WAAY2I,KAAK3I,aAErBE,EAAAC,EAAAC,cAAC8K,EAAW,CACRlK,KAAMA,EACNM,OAAQqH,KAAKyB,YACb7I,SAAUoH,KAAK2B,gBAEnBpK,EAAAC,EAAAC,cAAC+K,EAAQ,CACL1I,MAAOkG,KAAKsB,WACZvH,MAAOiG,KAAKM,WACZtG,MAAOgG,KAAKK,WACZ1H,OAAQqH,KAAKyB,cAEjBlK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAACgL,EAAU,CAACnI,KAAM6C,EAAY5C,WAAYyF,KAAK8B,mBAC/CvK,EAAAC,EAAAC,cAACiL,EAAS,MACVnL,EAAAC,EAAAC,cAACkL,EAAW,CAACxI,MAAOA,EAAOyI,YAAa5C,KAAK5F,WAC7C7C,EAAAC,EAAAC,cAACoL,EAAW,CAAC5I,MAAOA,EAAOC,YAAa8F,KAAK6B,sBAGpD1E,GACG5F,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACqL,EAAQ,YAK5BtD,EAzLS,CAASuD,cAAjBvD,EAkBKwD,aAAe,CAClB5L,MAAO,CACH,CAAEW,KAAM,WAAYM,KAAM,MAC1B,CAAEN,KAAM,cAAeM,KAAM,KAC7B,CAAEN,KAAM,aAAcM,KAAM,OAsKzBmH,QCjMfyD,IAASC,OACL3L,EAAAC,EAAAC,cAAC0L,EAAA,EAAW,CAACC,QAASC,KAClB9L,EAAAC,EAAAC,cAAC6L,EAAQ,OAEbzK,SAAS0K,eAAe","file":"static/js/main.f4040975.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport './TypeSelect.css';\n\nconst TypeSelect = ({ types, changeType, selected }) => (\n    <div className=\"TypeSelect\">\n        {types.map((type, index) => (\n            <button\n                key={type.name}\n                onClick={() => changeType(type)}\n                className={type.name === selected.name ? 'active' : ''}\n            >\n                {type.name}\n            </button>\n        ))}\n    </div>\n);\n\nexport default memo(TypeSelect);\n","function pad2(num) {\n    return num > 9 ? num : `0${num}`;\n}\n\nexport function formatTime(time) {\n    const minutes = pad2(Math.floor(time / 60));\n    const seconds = pad2(Math.floor(time % 60));\n\n    return `${minutes}:${seconds}`;\n}\n","import React from 'react';\nimport { formatTime } from '../../helpers';\nimport './TimeDisplay.css';\n\nconst TimeDisplay = ({ time, status, progress }) => {\n    document.title = `(${formatTime(time)}) Pomodoro`;\n\n    const radius = 150;\n    const stroke = 5;\n    const normalizedRadius = radius - stroke * 2;\n    const circumference = normalizedRadius * 2 * Math.PI;\n    const strokeDashoffset = circumference - (progress / 100) * circumference;\n\n    return (\n        <div className=\"TimeDisplay\">\n            <svg width=\"100%\" viewBox={`0 0 ${radius * 2} ${radius * 2}`}>\n                <circle\n                    stroke=\"##F07900\"\n                    fill=\"#fff\"\n                    strokeWidth={stroke}\n                    r={normalizedRadius}\n                    cx={radius}\n                    cy={radius}\n                />\n                <circle\n                    stroke=\"#D9534F\"\n                    fill=\"transparent\"\n                    strokeWidth={stroke}\n                    strokeDasharray={circumference + ' ' + circumference}\n                    style={{ strokeDashoffset }}\n                    r={normalizedRadius}\n                    cx={radius}\n                    cy={radius}\n                />\n            </svg>\n            <div>\n                <h1>{formatTime(time)}</h1>\n                <p>{status}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default TimeDisplay;\n","import React, { memo } from 'react';\nimport './Controls.css';\n\nconst Controls = ({ start, reset, pause, status }) => (\n    <div className=\"Controls\">\n        {!status && (\n            <button onClick={start} className=\"start\">\n                Start Timer\n            </button>\n        )}\n\n        {status === 'Finished' && (\n            <button onClick={start} className=\"start\">\n                Restart Timer\n            </button>\n        )}\n\n        {(status === 'Paused' || status === 'Running') && (\n            <div>\n                <button onClick={reset} className=\"reset\">\n                    Reset\n                </button>\n                <button\n                    onClick={pause}\n                    className={status === 'Paused' ? 'resume' : 'pause'}\n                >\n                    {status === 'Paused' ? 'Resume' : 'Pause'}\n                </button>\n            </div>\n        )}\n    </div>\n);\n\nexport default memo(Controls);\n","import React, { memo } from 'react';\nimport './Shortcuts.css';\n\nconst Shortcuts = () => (\n    <div className=\"Shortcuts\">\n        <i className=\"fas fa-keyboard\" />\n        <div className=\"Shortcuts-box\">\n            <div className=\"Shortcut\">\n                <div>Play / Pause / Resume</div>\n                <div>\n                    <kbd>Space</kbd>\n                </div>\n            </div>\n            <div className=\"Shortcut\">\n                <div>Reset</div>\n                <div>\n                    <kbd>Esc</kbd>\n                </div>\n            </div>\n            <div className=\"Shortcut\">\n                <div>Pomodoro</div>\n                <div>\n                    <kbd>1</kbd>\n                    <kbd>Num1</kbd>\n                </div>\n            </div>\n            <div className=\"Shortcut\">\n                <div>Short Break</div>\n                <div>\n                    <kbd>2</kbd>\n                    <kbd>Num2</kbd>\n                </div>\n            </div>\n            <div className=\"Shortcut\">\n                <div>Long Break</div>\n                <div>\n                    <kbd>3</kbd>\n                    <kbd>Num3</kbd>\n                </div>\n            </div>\n        </div>\n    </div>\n);\n\nexport default memo(Shortcuts);\n","import React, { memo } from 'react';\nimport './ToggleSound.css';\n\nconst ToggleSound = ({ sound, toggleSound }) => (\n    <button\n        className={`ToggleSound ${sound && 'active'}`}\n        onClick={toggleSound}\n        title={sound ? 'Disable Sound' : 'Enable Sound'}\n    >\n        <i className={`fa fa-volume-${sound ? 'up' : 'mute'}`} />\n    </button>\n);\n\nexport default memo(ToggleSound);\n","import './ToggleTheme.css';\r\nimport React, { memo } from 'react';\r\n\r\nconst ToggleTheme = ({ theme, setTheme }) => {\r\n    const handleChange = () => {\r\n        setTheme(theme === 'light' ? 'dark' : 'light');\r\n    };\r\n\r\n    return (\r\n        <div className=\"ToggleTheme\">\r\n            {/* button for switch  */}\r\n            <button onClick={handleChange}>\r\n                {theme === 'light' ? <i class=\"fa fa-moon\"></i> : <i class=\"fa fa-sun\"></i>}\r\n            </button>\r\n            <span className=\"slider round\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(ToggleTheme);","import React, { memo } from 'react';\nimport './styles.css';\n\nconst TaskToggle = ({ task, toggleTask }) => (\n    <button\n        className={`ToggleTask ${task && 'active'}`}\n        onClick={toggleTask}\n        title={task ? 'Disable Task' : 'Enable Task'}\n    >\n        <i className={'fa fa-tasks'} />\n    </button>\n);\n\nexport default memo(TaskToggle);\n","import { createContext } from 'react';\n\nexport default createContext({});\n","import React, { useRef, useContext } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport './styles.css';\n\nimport TaskContext from '../TaskList/context';\n\nexport default function Task({ task, index }) {\n    const ref = useRef();\n    const { move, handleStatus } = useContext(TaskContext);\n    const [{ isDragging }, dragRef] = useDrag({\n        item: { type: 'TASK', id: task.id, index },\n        collect: monitor => ({\n            isDragging: monitor.isDragging()\n        })\n    });\n\n    const [, dropRef] = useDrop({\n        accept: 'TASK',\n        hover(item, monitor) {\n            if (item.id === task.id) return;\n            const dragged = item;\n            const target = task;\n            const targetSize = ref.current.getBoundingClientRect();\n            const targetCenter = (targetSize.bottom - targetSize.top) / 2;\n            const draggedOffset = monitor.getClientOffset();\n            const draggedTop = draggedOffset.y - targetSize.top;\n\n            if (dragged.order < target.order && draggedTop < targetCenter) return;\n            if (dragged.order > target.order && draggedTop > targetCenter) return;\n\n            move(item.index, index);\n            item.index = index;\n        }\n    });\n\n    dragRef(dropRef(ref));\n\n    return (\n        <div ref={ref} className={isDragging ? 'Task Dragging' : 'Task'}>\n            <div>{task.title}</div>\n            <span onClick={() => handleStatus(task)}>\n                {task.closed ? 'Open' : 'Close'}\n            </span>\n        </div>\n    );\n}\n","import React, { memo, useState, useEffect } from 'react';\nimport produce from 'immer';\nimport TaskContext from './context';\nimport Task from '../Task';\nimport TypeSelect from '../../TypeSelect/TypeSelect';\n\nimport './styles.css';\n\nconst TaskList = () => {\n    const [input, setInput] = useState('');\n    const taskStatus = [\n        { name: 'Open', value: false },\n        { name: 'Completed', value: true },\n        { name: 'All', value: -1 },\n    ];\n\n    const [tasks, setTasks] = useState(\n        JSON.parse(window.localStorage.getItem('pomo.do-tasks')) || []\n    );\n    const [selectedStatus, setSelectedStatus] = useState(taskStatus[0]);\n\n    useEffect(() => {\n        window.localStorage.setItem('pomo.do-tasks', JSON.stringify(tasks));\n    }, [tasks]);\n\n    function move(from, to) {\n        setTasks(\n            produce(tasks, draft => {\n                const taskMoved = draft[from];\n                draft.splice(from, 1);\n                draft.splice(to, 0, taskMoved);\n            })\n        );\n    }\n\n    function handleStatus(task) {\n        console.log('task:', task);\n        setTasks(\n            produce(tasks, draft => {\n                const foundIndex = draft.findIndex(item => item.id === task.id);\n                draft[foundIndex].closed = !draft[foundIndex].closed;\n            })\n        );\n    }\n\n    function addTask() {\n        setTasks(\n            produce(tasks, draft => {\n                draft.push({ id: draft.length + 1, title: input, closed: false });\n            })\n        );\n        setInput('');\n    }\n\n    return (\n        <TaskContext.Provider value={{ tasks, move, handleStatus }}>\n            <TypeSelect\n                types={taskStatus}\n                selected={selectedStatus}\n                changeType={setSelectedStatus}\n            />\n            <div className=\"Tasks\">\n                <div className=\"Tasks-box\">\n                    {tasks.length > 0 ? (\n                        tasks\n                            .filter(\n                                task =>\n                                    task.closed === selectedStatus.value ||\n                                    selectedStatus.value === -1\n                            )\n                            .map((task, index) => (\n                                <Task key={task.id} index={index} task={task} />\n                            ))\n                    ) : (\n                        <div className=\"Task\">No Tasks</div>\n                    )}\n                </div>\n            </div>\n            <div className=\"Task\">\n                <input\n                    value={input}\n                    onChange={e => setInput(e.target.value)}\n                    placeholder=\"New Task\"\n                />\n                <span onClick={addTask}>{'Add'}</span>\n            </div>\n        </TaskContext.Provider>\n    );\n};\n\nexport default memo(TaskList);\n","import React, { Component } from 'react';\nimport TypeSelect from '../components/TypeSelect/TypeSelect';\nimport TimeDisplay from '../components/TimeDisplay/TimeDisplay';\nimport Controls from '../components/Controls/Controls';\nimport Shortcuts from '../components/Shortcuts/Shortcuts';\nimport ToggleSound from '../components/ToggleSound/ToggleSound';\nimport ToggleTheme from '../components/ToggleTheme/ToggleTheme';\nimport ToggleTask from '../components/Tasks/TaskToggle';\nimport TaskList from '../components/Tasks/TaskList';\nimport './Pomodoro.css';\n\nclass Pomodoro extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedType: props.types[0],\n            time: props.types[0].time,\n            interval: null,\n            running: false,\n            sound:\n                JSON.parse(window.localStorage.getItem('pomo.do-sound')) || true,\n            theme:\n                JSON.parse(window.localStorage.getItem('pomo.do-theme')),\n            taskStatus:\n                JSON.parse(window.localStorage.getItem('pomo.do-taskStatus')) ||\n                null\n        };\n    }\n\n    static defaultProps = {\n        types: [\n            { name: 'Pomodoro', time: 1500 },\n            { name: 'Short Break', time: 300 },\n            { name: 'Long Break', time: 900 }\n        ]\n    };\n\n    componentDidMount() {\n        document.addEventListener('keyup', this.handleKeyUp);\n        Notification.requestPermission();\n        this.sound = new Audio('bell.flac');\n        this.sound.preload = 'auto';\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keyup', this.handleKeyUp);\n    }\n\n    handleKeyUp = event => {\n        if (event.target.tagName === 'INPUT') return;\n        if (event.key === ' ') {\n            this.pauseTimer();\n        } else if (event.key === 'Escape') {\n            this.resetTimer();\n        } else if (event.key >= 1 && event.key <= this.props.types.length) {\n            this.changeType(this.props.types[event.key - 1]);\n        }\n    };\n\n    changeType = type => {\n        this.resetTimer();\n        this.setState({ selectedType: type, time: type.time, running: false });\n    };\n\n    tick = () => {\n        if (this.state.time <= 1) {\n            this.stopInterval();\n            this.setState({ running: false });\n            if (this.state.sound) this.sound.play();\n            try {\n                navigator.serviceWorker.register('service-worker.js').then(sw => {\n                    sw.showNotification(`${this.state.selectedType.name} finished!`);\n                });\n            } catch (e) {\n                console.log('Notification error', e);\n            }\n        }\n        this.setState(state => ({ time: state.time - 1 }));\n    };\n\n    stopInterval = () => {\n        clearInterval(this.state.interval);\n        this.setState({ interval: null });\n    };\n\n    startTimer = () => {\n        this.setState(state => ({\n            running: true,\n            interval: setInterval(this.tick, 1000),\n            time: state.time > 0 ? state.time : state.selectedType.time\n        }));\n        this.sound.pause();\n        this.sound.currentTime = 0;\n    };\n\n    resetTimer = () => {\n        this.stopInterval();\n        this.setState(state => ({\n            time: state.selectedType.time,\n            running: false\n        }));\n    };\n\n    pauseTimer = () => {\n        this.state.interval ? this.stopInterval() : this.startTimer();\n    };\n\n    getStatus = () => {\n        const { time, running, interval } = this.state;\n        if (time === 0) return 'Finished';\n        if (running && !interval) return 'Paused';\n        if (running) return 'Running';\n    };\n\n    getProgress = () => {\n        const current = this.state.time;\n        const total = this.state.selectedType.time;\n        return ((total - current) / total) * 100;\n    };\n\n    handleToggleSound = () => {\n        this.setState(\n            state => ({\n                sound: !state.sound\n            }),\n            () => {\n                window.localStorage.setItem('pomo.do-sound', this.state.sound);\n            }\n        );\n    };\n\n    handleToggleTask = () => {\n        this.setState(\n            state => ({\n                taskStatus: !state.taskStatus\n            }),\n            () => {\n                window.localStorage.setItem(\n                    'pomo.do-taskStatus',\n                    this.state.taskStatus\n                );\n            }\n        );\n    };\n\n    setTheme = () => {\n        this.setState(\n            state => ({\n                theme: this.state.theme\n            }),\n            () => {\n                window.localStorage.setItem(\n                    'pomo.do-theme',\n                    this.state.theme\n                );\n            }\n        );\n    };\n\n    render() {\n        const { time, selectedType, sound, theme, taskStatus } = this.state;\n        const { types } = this.props;\n        console.log(this.state.theme);\n        return (\n            <div className=\"Content\">\n                <div className=\"Pomodoro\">\n                    <TypeSelect\n                        types={types}\n                        selected={selectedType}\n                        changeType={this.changeType}\n                    />\n                    <TimeDisplay\n                        time={time}\n                        status={this.getStatus()}\n                        progress={this.getProgress()}\n                    />\n                    <Controls\n                        start={this.startTimer}\n                        reset={this.resetTimer}\n                        pause={this.pauseTimer}\n                        status={this.getStatus()}\n                    />\n                    <div className=\"navbar\">\n                        <ToggleTask task={taskStatus} toggleTask={this.handleToggleTask} />\n                        <Shortcuts />\n                        <ToggleTheme theme={theme} toggleTheme={this.setTheme} />\n                        <ToggleSound sound={sound} toggleSound={this.handleToggleSound} />\n                    </div>\n                </div>\n                {taskStatus && (\n                    <div className=\"TaskPanel\">\n                        <TaskList />\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default Pomodoro;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport { DndProvider } from 'react-dnd';\nimport Pomodoro from './containers/Pomodoro';\n\nReactDOM.render(\n    <DndProvider backend={HTML5Backend}>\n        <Pomodoro />\n    </DndProvider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}